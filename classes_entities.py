import pyinputplus as pyip
###############################################################################
#  Entity is the Base Class from which all "People" are Inherited in Usurper. #
###############################################################################
class Entity:
    # Entity Attributes
    def __init__(self, name, grid_location, team, traits):
        self.name = name
        # Generally grid locations are those which have been generated by the
        # game map (meaning limited to that set.)
        # When creating the game map, a "dead" grid needs to be created,
        # in order to "store" entities which don't stay on normal map locations.
        # example: Legendary Monsters.
        self.grid_location = grid_location
        # This concept is a little abstract, and teams will be classes that
        # deal with Players and Non-Player Characters (NPC)s alike.
        # Generally, there will be three types of Teams:
        ## A Player Team "TeamPlayer1",
        ## a Team-NPC (such as a Noble House, which occupy the Cities.),
        ## Non-Team-NPC (such as a random hostile encounter in Grid A1.)
        self.team = team
        self.traits = traits

    # Entity Methods.
    def change_grid_location(self, target_grid_location):
        '''
        Should be called by making the new grid location as the "X = func()"
        call.
        Is NOT used for giving orders to an entity.
        Is used for a permanent changed to an entity (such as moving from one
        lair to another.)
        '''
        self.grid_location = target_grid_location
        return grid_location

    def display_possible_actions(self, available_actions):
        '''
        Should be called within the context of the ORDERS Menu.
        Called whenever a player selects a given entity,
        displays the available actions (orders) options for that entity.
        '''
        for x in available_actions:
            print(x)
        return none

    def change_name(self, name):
        '''
        Players may want to change the default names of their new squads and the like.
        Should be called in the context of the LAIR Menu.
        Whenever a player selects a given entity, one of the button options
        should be to call the Change Name function
        Called whenever a player selects a given entity and selects to
        Change Name.
        '''
        self.name = pyip.inputStr(prompt=("Change {}'s name to what? ").format(name), blank=False)
        # is this necessary? or just none?
        return self.name

    def display_name(self, name):
        print("Name: {}").format(self.name)

    def set_team(self, team):
        '''
        Should be called in the background whenever an entity is initially created.
        This will be used to establish into which lair/collective the newly generated
        entity will be assigned.
        Should be called actively (visible to the affected players) if an entity is captured via the Prison and/or Force Cage mechanics.
        '''
        # I don't know how to make this method, yet.
        # will need the following:
        ## Check: Player, Team-NPC, or Generic-NPC.
        ## Assign self.team to the given Check.
        pass

###############################################################################
#      Leaders refer to those non-combatants which provide "area" bonuses.    #
#                     Leaders can perform Leader actions.                     #
###############################################################################
class Leader(Entity):
    # Leader Attributes
    def __init__(self, health, spells_known, skills_known, abilities_learned,
    leader_ability, leader_type, donkey_equipped, items_carried,
    available_actions, leader_bonus):
        # Leaders need ALL attributes of the Entity parent class.
        Entity.__init__()
        self.health = health = 2
        self.spells_known = spells_known
        self.skills_known = skills_known
        self.abilities_learned = abilities_learned
        self.leader_ability = leader_ability
        self.leader_type = leader_type
        self.donkey_equipped = donkey_equipped
        self.items_carried = items_carried
        # Replacement me with the actual variable name of the "Leader Available Actions" when created.
        self.available_actions = available_actions
        self.leader_bonus = leader_bonus = 25

    # Leader Methods
    def take_damage(self, health, name):
        '''
        Should be called within the context of combat results.
        The losing side of a combat, if it had one or more leaders, may take_damage.
        If that check results in the affirmative, call this and display the results to the player.
        '''
        if self.health == 2:
            self.health = 1
            self.leader_bonus = 12
            print("{} has suffered an injury!".format(self.name))
        else:
            # health essentially drops from 1->0.
            self.health = 0
            print("{} has succumbed to their wounds and died!".format(self.name))
            # update to "dead"
            # remove from lair thread.
        return none

    def heal_damage(self, health, name):
        '''
        Essentially the opposite of take damage, except that a leader cannot
        be revived from death.
        Should be called within the context of the "Rest" action.
        May be called within the context of other events that grant "Healing" to a Leader.
        '''
        if self.health == 2:
            print("{} is already at max health.  No healing was applied".format(self.name))
        else:
            self.health = 2
            self.leader_bonus = 25
        return none


###############################################################################
#  Heroes refer to Unique non-combatants which provide specialized bonuses.   #
#                Heroes perform Training and Assist Actions.                  #
###############################################################################
class Hero(Entity):
    # Hero Attributes
    def __init__(self, spells_known, skills_known, abilities_learned,
    originating_settlement, associated_quest, cost, upkeep, available_actions,
    morale_modifier, morale_status, unique_flag, unique):
        # Heroes need ALL attributes of the Entity parent class.
        Entity.__init__()
        self.spells_known = spells_known
        self.skills_known = skills_known
        self.abilities_learned = abilities_learned
        # Originating Settlement is partially "flavor", but it also serves
        # as a triggering mechanic for the associated quest.
        # If the hero is ever brought to its originating settlement during an
        # action, the player will automatically receive the associated quest.
        self.originating_settlement = originating_settlement
        self.cost = cost
        self.upkeep = upkeep
        # See originating settlement note.
        self.associated_quest = associated_quest
        # Replace me with the actual variable name of the "Hero Available Actions" when created.
        self.available_actions = available_actions
        self.morale_modifier = morale_modifier
        self.morale_status = morale_status
        # This is set to False until the given Hero is DISCOVERED.
        # Discovered simply references to being "generated" at any point in the game.  Once a decision is made about whether or not to recruit a given
        # hero, then that hero may NEVER be recruited again. (remove it from all future instances of being "rolled" in this game instance.)
        self.unique_flag = unique_flag = False
        # Some components of the game will check if the entity is unique to determine whether it qualifies for targeting/selection rules.
        self.unique = unique = True

    # Hero Methods
    def morestuff():
        pass


###############################################################################
#  Squads refer to a collective-singular group, represented as a single       #
#   entity which can perform tasks and participate in combat as a collective  #
#                Squads perform Squad actions and assist actions.             #
#      Squads Health stats represent losing members of the larger group.      #
###############################################################################
class Squad(Entity):
    # Squad Attributes
    def __init__(self, health, max_health, offense, defense, strength, race,
    level, cost, upkeep, speed_overland, speed_combat, max_weapons, max_tools,
    weapons_equipped, tools_equipped, mounts_equipped, racial_ability,
    spells_known, skills_known, abilities_learned, unique,
    damage_chart, available_actions, morale_status):
        # Squads need ALL attributes of the Entity parent class.
        Entity.__init__()
        self.health = health
        self.max_health = max_health = 10
        self.offense = offense
        self.defense = defense
        self.strength = strength
        self.race = race
        self.level = level = 0
        self.cost = cost
        self.upkeep = upkeep
        self.speed_overland = speed_overland
        self.speed_combat = speed_combat
        self.max_weapons = max_weapons
        self.max_tools = max_tools
        self.weapons_equipped = weapons_equipped
        self.tools_equipped = tools_equipped
        self.mounts_equipped = mounts_equipped
        self.racial_ability = racial_ability
        self.spells_known = spells_known
        self.skills_known = skills_known
        self.abilities_learned = abilities_learned
        # Standard squads are normally not normally unique.
        # The default value is therefore false.
        # If a Unique Squad is discovered, override this value to true.
        # Some components of the game will check if the entity is unique to
        # determine whether it qualifies for targeting/selection rules.
        self.unique = unique = False
        # I should probably be replaced by a variable name that is pertinent
        # to standard squads.
        self.damage_chart = damage_chart = "Standard_Damage_Chart"
        # Replace me with the actual variable name of the "Squad Available Actions" when created.
        self.available_actions = available_actions
        self.morale_status = morale_status

###############################################################################
#   Monsters are a type of squads that are a single individual instead of a   #
#     collective entity which can perform tasks and participate in combat.    #
#              Monsters perform Squad actions and assist actions.             #
#  Monster Health stats represent taking wounds w/out performance degradation #
###############################################################################
class Monster(Squad, Entity):
    # Monster Attributes
    def __init__(self, damage_reduction, health, max_health, damage_chart):
        # Monsters need ALL attributes of the Entity parent class.
        # Monsters need MOST of the squad attributes:
        ## Exception: override the damage_chart from Squads.
        super.__init__()
        self.damage_reduction = damage_reduction
        self.health = health
        self.max_health = max_health
        # I should probably be replaced by a variable name that is pertinent
        # to standard squads.
        self.damage_chart = damage_chart = "Monster_Damage_Chart"

###############################################################################
#  Legendary Monsters are Non-Player Characters (NPC) that function similarly #
#                              to Monsters.                                   #
# Legendary Monsters have additional features that persist outside of normal  #
# combat that can affect the scope of the game even when not actively in use. #
#       Legendary Monsters are always treated as being in an inaccessible     #
#               grid_location (such as Z0), except during combat.             #
###############################################################################
class Legendary_Monster(Monster, Squad, Entity):
    # Legendary Monster Attributes
    def __init__(self, spawn_trigger, world_effect, no_morale, available_actions, unique_flag, unique):
        # Legendary Monsters need ALL attributes of the Entity parent class.
        # Legendary Monsters need MOST of the squad attributes:
        ## Exception: override the damage_chart from Squads.
        ## Exception: override the available_actions from Squads
        ## Exception: Legendary Monsters NEVER make Morale checks.  E V E R
        ## Exception: override the default for unique.  All legendary Monsters
        ## are unique.
        super.__init__()
        # This should be replaced with an actual variable.
        # This default should be MODIFIED based on game DIFFICULTY settings.
        # The result here is "standard" difficulty.
        self.spawn_trigger = spawn_trigger = "Victory Point Threshold 5"
        self.world_effect = world_effect
        # Legendary Monsters never roll Morale Checks.
        # Any effect which would normally target the Legendary Monster for a
        # Morale check is instead cancelled/ignored.
        self.no_morale = no_morale = True
        self.available_actions = available_actions = None
        # This is set to False until the given Legendary Monster is DISCOVERED.
        # Discovered simply references to being "generated" at any point in
        # the game.
        # If this Legendary Monster is generated during a spawn trigger result, # then that Legendary Monster may NEVER be spawned again. (remove it
        # from all future instances of being "rolled" in this game instance.)
        self.unique_flag = unique_flag = False
        self.unique = unique = True
